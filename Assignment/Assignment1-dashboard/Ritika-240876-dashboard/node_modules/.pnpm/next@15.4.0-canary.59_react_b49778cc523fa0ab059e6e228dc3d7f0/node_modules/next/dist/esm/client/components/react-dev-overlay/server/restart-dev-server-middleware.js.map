{"version":3,"sources":["../../../../../src/client/components/react-dev-overlay/server/restart-dev-server-middleware.ts"],"sourcesContent":["import type { ServerResponse, IncomingMessage } from 'http'\nimport type { Telemetry } from '../../../../telemetry/storage'\nimport { RESTART_EXIT_CODE } from '../../../../server/lib/utils'\nimport { middlewareResponse } from './middleware-response'\n\nconst EVENT_DEV_OVERLAY_RESTART_SERVER = 'DEV_OVERLAY_RESTART_SERVER'\n\nexport function getRestartDevServerMiddleware(telemetry: Telemetry) {\n  return async function (\n    req: IncomingMessage,\n    res: ServerResponse,\n    next: () => void\n  ): Promise<void> {\n    const { pathname } = new URL(`http://n${req.url}`)\n    if (pathname !== '/__nextjs_restart_dev' || req.method !== 'POST') {\n      return next()\n    }\n\n    telemetry.record({\n      eventName: EVENT_DEV_OVERLAY_RESTART_SERVER,\n      payload: {},\n    })\n\n    // TODO: Use flushDetached\n    await telemetry.flush()\n\n    // do this async to try to give the response a chance to send\n    // it's not really important if it doesn't though\n    setTimeout(() => {\n      process.exit(RESTART_EXIT_CODE)\n    }, 0)\n\n    return middlewareResponse.noContent(res)\n  }\n}\n"],"names":["RESTART_EXIT_CODE","middlewareResponse","EVENT_DEV_OVERLAY_RESTART_SERVER","getRestartDevServerMiddleware","telemetry","req","res","next","pathname","URL","url","method","record","eventName","payload","flush","setTimeout","process","exit","noContent"],"mappings":"AAEA,SAASA,iBAAiB,QAAQ,+BAA8B;AAChE,SAASC,kBAAkB,QAAQ,wBAAuB;AAE1D,MAAMC,mCAAmC;AAEzC,OAAO,SAASC,8BAA8BC,SAAoB;IAChE,OAAO,eACLC,GAAoB,EACpBC,GAAmB,EACnBC,IAAgB;QAEhB,MAAM,EAAEC,QAAQ,EAAE,GAAG,IAAIC,IAAI,AAAC,aAAUJ,IAAIK,GAAG;QAC/C,IAAIF,aAAa,2BAA2BH,IAAIM,MAAM,KAAK,QAAQ;YACjE,OAAOJ;QACT;QAEAH,UAAUQ,MAAM,CAAC;YACfC,WAAWX;YACXY,SAAS,CAAC;QACZ;QAEA,0BAA0B;QAC1B,MAAMV,UAAUW,KAAK;QAErB,6DAA6D;QAC7D,iDAAiD;QACjDC,WAAW;YACTC,QAAQC,IAAI,CAAClB;QACf,GAAG;QAEH,OAAOC,mBAAmBkB,SAAS,CAACb;IACtC;AACF","ignoreList":[0]}