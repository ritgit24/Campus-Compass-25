{"version":3,"sources":["../../../../src/server/lib/router-utils/setup-dev-bundler.ts"],"sourcesContent":["import type { NextConfigComplete } from '../../config-shared'\nimport type { FilesystemDynamicRoute } from './filesystem'\nimport type { UnwrapPromise } from '../../../lib/coalesced-function'\nimport {\n  getPageStaticInfo,\n  type MiddlewareMatcher,\n} from '../../../build/analysis/get-page-static-info'\nimport type { RoutesManifest } from '../../../build'\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher'\nimport type { PropagateToWorkersField } from './types'\nimport type { NextJsHotReloaderInterface } from '../../dev/hot-reloader-types'\n\nimport { createDefineEnv } from '../../../build/swc'\nimport fs from 'fs'\nimport { mkdir } from 'fs/promises'\nimport url from 'url'\nimport path from 'path'\nimport qs from 'querystring'\nimport Watchpack from 'next/dist/compiled/watchpack'\nimport { loadEnvConfig } from '@next/env'\nimport findUp from 'next/dist/compiled/find-up'\nimport { buildCustomRoute } from './filesystem'\nimport * as Log from '../../../build/output/log'\nimport HotReloaderWebpack from '../../dev/hot-reloader-webpack'\nimport { setGlobal } from '../../../trace/shared'\nimport type { Telemetry } from '../../../telemetry/storage'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport loadJsConfig from '../../../build/load-jsconfig'\nimport { createValidFileMatcher } from '../find-page-file'\nimport {\n  EVENT_BUILD_FEATURE_USAGE,\n  eventCliSession,\n} from '../../../telemetry/events'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport {\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from '../../../build/entries'\nimport { verifyTypeScriptSetup } from '../../../lib/verify-typescript-setup'\nimport { verifyPartytownSetup } from '../../../lib/verify-partytown-setup'\nimport { getRouteRegex } from '../../../shared/lib/router/utils/route-regex'\nimport { normalizeAppPath } from '../../../shared/lib/router/utils/app-paths'\nimport { buildDataRoute } from './build-data-route'\nimport { getRouteMatcher } from '../../../shared/lib/router/utils/route-matcher'\nimport { normalizePathSep } from '../../../shared/lib/page-path/normalize-path-sep'\nimport { createClientRouterFilter } from '../../../lib/create-client-router-filter'\nimport { absolutePathToPage } from '../../../shared/lib/page-path/absolute-path-to-page'\nimport { generateInterceptionRoutesRewrites } from '../../../lib/generate-interception-routes-rewrites'\n\nimport {\n  CLIENT_STATIC_FILES_PATH,\n  DEV_CLIENT_PAGES_MANIFEST,\n  DEV_CLIENT_MIDDLEWARE_MANIFEST,\n  PHASE_DEVELOPMENT_SERVER,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n  ROUTES_MANIFEST,\n  PRERENDER_MANIFEST,\n} from '../../../shared/lib/constants'\n\nimport { getMiddlewareRouteMatcher } from '../../../shared/lib/router/utils/middleware-route-matcher'\n\nimport {\n  isMiddlewareFile,\n  NestedMiddlewareError,\n  isInstrumentationHookFile,\n  getPossibleMiddlewareFilenames,\n  getPossibleInstrumentationHookFilenames,\n} from '../../../build/utils'\nimport { devPageFiles } from '../../../build/webpack/plugins/next-types-plugin/shared'\nimport type { LazyRenderServerInstance } from '../router-server'\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from '../../dev/hot-reloader-types'\nimport { PAGE_TYPES } from '../../../lib/page-types'\nimport { createHotReloaderTurbopack } from '../../dev/hot-reloader-turbopack'\nimport { generateEncryptionKeyBase64 } from '../../app-render/encryption-utils-server'\nimport { isMetadataRouteFile } from '../../../lib/metadata/is-metadata-route'\nimport { normalizeMetadataPageToRoute } from '../../../lib/metadata/get-metadata-route'\nimport { createEnvDefinitions } from '../experimental/create-env-definitions'\nimport { JsConfigPathsPlugin } from '../../../build/webpack/plugins/jsconfig-paths-plugin'\nimport { store as consoleStore } from '../../../build/output/store'\nimport {\n  isPersistentCachingEnabled,\n  ModuleBuildError,\n  TurbopackInternalError,\n} from '../../../shared/lib/turbopack/utils'\nimport { getDefineEnv } from '../../../build/define-env'\n\nexport type SetupOpts = {\n  renderServer: LazyRenderServerInstance\n  dir: string\n  turbo?: boolean\n  appDir?: string\n  pagesDir?: string\n  telemetry: Telemetry\n  isCustomServer?: boolean\n  fsChecker: UnwrapPromise<\n    ReturnType<typeof import('./filesystem').setupFsCheck>\n  >\n  nextConfig: NextConfigComplete\n  port: number\n  onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined\n  resetFetch: () => void\n}\n\nexport interface DevRoutesManifest {\n  version: number\n  caseSensitive: RoutesManifest['caseSensitive']\n  basePath: RoutesManifest['basePath']\n  rewrites: RoutesManifest['rewrites']\n  redirects: RoutesManifest['redirects']\n  headers: RoutesManifest['headers']\n  i18n: RoutesManifest['i18n']\n  skipMiddlewareUrlNormalize: RoutesManifest['skipMiddlewareUrlNormalize']\n}\n\nexport type ServerFields = {\n  actualMiddlewareFile?: string | undefined\n  actualInstrumentationHookFile?: string | undefined\n  appPathRoutes?: Record<string, string | string[]>\n  middleware?:\n    | {\n        page: string\n        match: MiddlewareRouteMatch\n        matchers?: MiddlewareMatcher[]\n      }\n    | undefined\n  hasAppNotFound?: boolean\n  interceptionRoutes?: ReturnType<\n    typeof import('./filesystem').buildCustomRoute\n  >[]\n  setIsrStatus?: (key: string, value: boolean) => void\n  resetFetch?: () => void\n}\n\nasync function verifyTypeScript(opts: SetupOpts) {\n  let usingTypeScript = false\n  const verifyResult = await verifyTypeScriptSetup({\n    dir: opts.dir,\n    distDir: opts.nextConfig.distDir,\n    intentDirs: [opts.pagesDir, opts.appDir].filter(Boolean) as string[],\n    typeCheckPreflight: false,\n    tsconfigPath: opts.nextConfig.typescript.tsconfigPath,\n    disableStaticImages: opts.nextConfig.images.disableStaticImages,\n    hasAppDir: !!opts.appDir,\n    hasPagesDir: !!opts.pagesDir,\n  })\n\n  if (verifyResult.version) {\n    usingTypeScript = true\n  }\n  return usingTypeScript\n}\n\nexport async function propagateServerField(\n  opts: SetupOpts,\n  field: PropagateToWorkersField,\n  args: any\n) {\n  await opts.renderServer?.instance?.propagateServerField(opts.dir, field, args)\n}\n\nasync function startWatcher(opts: SetupOpts) {\n  const { nextConfig, appDir, pagesDir, dir, resetFetch } = opts\n  const { useFileSystemPublicRoutes } = nextConfig\n  const usingTypeScript = await verifyTypeScript(opts)\n\n  const distDir = path.join(opts.dir, opts.nextConfig.distDir)\n\n  // we ensure the types directory exists here\n  if (usingTypeScript) {\n    const distTypesDir = path.join(distDir, 'types')\n    if (!fs.existsSync(distTypesDir)) {\n      await mkdir(distTypesDir, { recursive: true })\n    }\n  }\n\n  setGlobal('distDir', distDir)\n  setGlobal('phase', PHASE_DEVELOPMENT_SERVER)\n\n  const validFileMatcher = createValidFileMatcher(\n    nextConfig.pageExtensions,\n    appDir\n  )\n\n  const serverFields: ServerFields = {}\n\n  // Update logging state once based on next.config.js when initializing\n  consoleStore.setState({\n    logging: nextConfig.logging !== false,\n  })\n\n  const hotReloader: NextJsHotReloaderInterface = opts.turbo\n    ? await createHotReloaderTurbopack(opts, serverFields, distDir, resetFetch)\n    : new HotReloaderWebpack(opts.dir, {\n        appDir,\n        pagesDir,\n        distDir,\n        config: opts.nextConfig,\n        buildId: 'development',\n        encryptionKey: await generateEncryptionKeyBase64({\n          isBuild: false,\n          distDir,\n        }),\n        telemetry: opts.telemetry,\n        rewrites: opts.fsChecker.rewrites,\n        previewProps: opts.fsChecker.prerenderManifest.preview,\n        resetFetch,\n      })\n\n  await hotReloader.start()\n\n  // have to write this after starting hot-reloader since that\n  // cleans the dist dir\n  const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n  const routesManifest: DevRoutesManifest = {\n    version: 3,\n    caseSensitive: !!nextConfig.experimental.caseSensitiveRoutes,\n    basePath: nextConfig.basePath,\n    rewrites: opts.fsChecker.rewrites,\n    redirects: opts.fsChecker.redirects,\n    headers: opts.fsChecker.headers,\n    i18n: nextConfig.i18n || undefined,\n    skipMiddlewareUrlNormalize: nextConfig.skipMiddlewareUrlNormalize,\n  }\n  await fs.promises.writeFile(\n    routesManifestPath,\n    JSON.stringify(routesManifest)\n  )\n\n  const prerenderManifestPath = path.join(distDir, PRERENDER_MANIFEST)\n  await fs.promises.writeFile(\n    prerenderManifestPath,\n    JSON.stringify(opts.fsChecker.prerenderManifest, null, 2)\n  )\n\n  if (opts.nextConfig.experimental.nextScriptWorkers) {\n    await verifyPartytownSetup(\n      opts.dir,\n      path.join(distDir, CLIENT_STATIC_FILES_PATH)\n    )\n  }\n\n  opts.fsChecker.ensureCallback(async function ensure(item) {\n    if (item.type === 'appFile' || item.type === 'pageFile') {\n      await hotReloader.ensurePage({\n        clientOnly: false,\n        page: item.itemPath,\n        isApp: item.type === 'appFile',\n        definition: undefined,\n      })\n    }\n  })\n\n  let resolved = false\n  let prevSortedRoutes: string[] = []\n\n  await new Promise<void>(async (resolve, reject) => {\n    if (pagesDir) {\n      // Watchpack doesn't emit an event for an empty directory\n      fs.readdir(pagesDir, (_, files) => {\n        if (files?.length) {\n          return\n        }\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      })\n    }\n\n    const pages = pagesDir ? [pagesDir] : []\n    const app = appDir ? [appDir] : []\n    const directories = [...pages, ...app]\n\n    const rootDir = pagesDir || appDir\n    const files = [\n      ...getPossibleMiddlewareFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n      ...getPossibleInstrumentationHookFilenames(\n        path.join(rootDir!, '..'),\n        nextConfig.pageExtensions\n      ),\n    ]\n    let nestedMiddleware: string[] = []\n\n    const envFiles = [\n      '.env.development.local',\n      '.env.local',\n      '.env.development',\n      '.env',\n    ].map((file) => path.join(dir, file))\n\n    files.push(...envFiles)\n\n    // tsconfig/jsconfig paths hot-reloading\n    const tsconfigPaths = [\n      path.join(dir, 'tsconfig.json'),\n      path.join(dir, 'jsconfig.json'),\n    ] as const\n    files.push(...tsconfigPaths)\n\n    const wp = new Watchpack({\n      ignored: (pathname: string) => {\n        return (\n          !files.some((file) => file.startsWith(pathname)) &&\n          !directories.some(\n            (d) => pathname.startsWith(d) || d.startsWith(pathname)\n          )\n        )\n      },\n    })\n    const fileWatchTimes = new Map()\n    let enabledTypeScript = usingTypeScript\n    let previousClientRouterFilters: any\n    let previousConflictingPagePaths: Set<string> = new Set()\n\n    wp.on('aggregated', async () => {\n      let middlewareMatchers: MiddlewareMatcher[] | undefined\n      const routedPages: string[] = []\n      const knownFiles = wp.getTimeInfoEntries()\n      const appPaths: Record<string, string[]> = {}\n      const pageNameSet = new Set<string>()\n      const conflictingAppPagePaths = new Set<string>()\n      const appPageFilePaths = new Map<string, string>()\n      const pagesPageFilePaths = new Map<string, string>()\n\n      let envChange = false\n      let tsconfigChange = false\n      let conflictingPageChange = 0\n      let hasRootAppNotFound = false\n\n      const { appFiles, pageFiles } = opts.fsChecker\n\n      appFiles.clear()\n      pageFiles.clear()\n      devPageFiles.clear()\n\n      const sortedKnownFiles: string[] = [...knownFiles.keys()].sort(\n        sortByPageExts(nextConfig.pageExtensions)\n      )\n\n      for (const fileName of sortedKnownFiles) {\n        if (\n          !files.includes(fileName) &&\n          !directories.some((d) => fileName.startsWith(d))\n        ) {\n          continue\n        }\n        const meta = knownFiles.get(fileName)\n\n        const watchTime = fileWatchTimes.get(fileName)\n        // If the file is showing up for the first time or the meta.timestamp is changed since last time\n        const watchTimeChange =\n          watchTime === undefined ||\n          (watchTime && watchTime !== meta?.timestamp)\n        fileWatchTimes.set(fileName, meta?.timestamp)\n\n        if (envFiles.includes(fileName)) {\n          if (watchTimeChange) {\n            envChange = true\n          }\n          continue\n        }\n\n        if (tsconfigPaths.includes(fileName)) {\n          if (fileName.endsWith('tsconfig.json')) {\n            enabledTypeScript = true\n          }\n          if (watchTimeChange) {\n            tsconfigChange = true\n          }\n          continue\n        }\n\n        if (\n          meta?.accuracy === undefined ||\n          !validFileMatcher.isPageFile(fileName)\n        ) {\n          continue\n        }\n\n        const isAppPath = Boolean(\n          appDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(appDir) + '/'\n            )\n        )\n        const isPagePath = Boolean(\n          pagesDir &&\n            normalizePathSep(fileName).startsWith(\n              normalizePathSep(pagesDir) + '/'\n            )\n        )\n\n        const rootFile = absolutePathToPage(fileName, {\n          dir: dir,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: false,\n          pagesType: PAGE_TYPES.ROOT,\n        })\n\n        if (isMiddlewareFile(rootFile)) {\n          const staticInfo = await getStaticInfoIncludingLayouts({\n            pageFilePath: fileName,\n            config: nextConfig,\n            appDir: appDir,\n            page: rootFile,\n            isDev: true,\n            isInsideAppDir: isAppPath,\n            pageExtensions: nextConfig.pageExtensions,\n          })\n          if (nextConfig.output === 'export') {\n            Log.error(\n              'Middleware cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n            )\n            continue\n          }\n          serverFields.actualMiddlewareFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualMiddlewareFile',\n            serverFields.actualMiddlewareFile\n          )\n          middlewareMatchers = staticInfo.middleware?.matchers || [\n            { regexp: '.*', originalSource: '/:path*' },\n          ]\n          continue\n        }\n        if (isInstrumentationHookFile(rootFile)) {\n          serverFields.actualInstrumentationHookFile = rootFile\n          await propagateServerField(\n            opts,\n            'actualInstrumentationHookFile',\n            serverFields.actualInstrumentationHookFile\n          )\n          continue\n        }\n\n        if (fileName.endsWith('.ts') || fileName.endsWith('.tsx')) {\n          enabledTypeScript = true\n        }\n\n        if (!(isAppPath || isPagePath)) {\n          continue\n        }\n\n        // Collect all current filenames for the TS plugin to use\n        devPageFiles.add(fileName)\n\n        let pageName = absolutePathToPage(fileName, {\n          dir: isAppPath ? appDir! : pagesDir!,\n          extensions: nextConfig.pageExtensions,\n          keepIndex: isAppPath,\n          pagesType: isAppPath ? PAGE_TYPES.APP : PAGE_TYPES.PAGES,\n        })\n\n        if (\n          isAppPath &&\n          appDir &&\n          isMetadataRouteFile(\n            fileName.replace(appDir, ''),\n            nextConfig.pageExtensions,\n            true\n          )\n        ) {\n          const staticInfo = await getPageStaticInfo({\n            pageFilePath: fileName,\n            nextConfig: {},\n            page: pageName,\n            isDev: true,\n            pageType: PAGE_TYPES.APP,\n          })\n\n          pageName = normalizeMetadataPageToRoute(\n            pageName,\n            !!(staticInfo.generateSitemaps || staticInfo.generateImageMetadata)\n          )\n        }\n\n        if (\n          !isAppPath &&\n          pageName.startsWith('/api/') &&\n          nextConfig.output === 'export'\n        ) {\n          Log.error(\n            'API Routes cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export'\n          )\n          continue\n        }\n\n        if (isAppPath) {\n          const isRootNotFound = validFileMatcher.isRootNotFound(fileName)\n          hasRootAppNotFound = true\n\n          if (isRootNotFound) {\n            continue\n          }\n          if (!isRootNotFound && !validFileMatcher.isAppRouterPage(fileName)) {\n            continue\n          }\n          // Ignore files/directories starting with `_` in the app directory\n          if (normalizePathSep(pageName).includes('/_')) {\n            continue\n          }\n\n          const originalPageName = pageName\n          pageName = normalizeAppPath(pageName).replace(/%5F/g, '_')\n          if (!appPaths[pageName]) {\n            appPaths[pageName] = []\n          }\n          appPaths[pageName].push(originalPageName)\n\n          if (useFileSystemPublicRoutes) {\n            appFiles.add(pageName)\n          }\n\n          if (routedPages.includes(pageName)) {\n            continue\n          }\n        } else {\n          if (useFileSystemPublicRoutes) {\n            pageFiles.add(pageName)\n            // always add to nextDataRoutes for now but in future only add\n            // entries that actually use getStaticProps/getServerSideProps\n            opts.fsChecker.nextDataRoutes.add(pageName)\n          }\n        }\n        ;(isAppPath ? appPageFilePaths : pagesPageFilePaths).set(\n          pageName,\n          fileName\n        )\n\n        if (appDir && pageNameSet.has(pageName)) {\n          conflictingAppPagePaths.add(pageName)\n        } else {\n          pageNameSet.add(pageName)\n        }\n\n        /**\n         * If there is a middleware that is not declared in the root we will\n         * warn without adding it so it doesn't make its way into the system.\n         */\n        if (/[\\\\\\\\/]_middleware$/.test(pageName)) {\n          nestedMiddleware.push(pageName)\n          continue\n        }\n\n        routedPages.push(pageName)\n      }\n\n      const numConflicting = conflictingAppPagePaths.size\n      conflictingPageChange = numConflicting - previousConflictingPagePaths.size\n\n      if (conflictingPageChange !== 0) {\n        if (numConflicting > 0) {\n          let errorMessage = `Conflicting app and page file${\n            numConflicting === 1 ? ' was' : 's were'\n          } found, please remove the conflicting files to continue:\\n`\n\n          for (const p of conflictingAppPagePaths) {\n            const appPath = path.relative(dir, appPageFilePaths.get(p)!)\n            const pagesPath = path.relative(dir, pagesPageFilePaths.get(p)!)\n            errorMessage += `  \"${pagesPath}\" - \"${appPath}\"\\n`\n          }\n          hotReloader.setHmrServerError(new Error(errorMessage))\n        } else if (numConflicting === 0) {\n          hotReloader.clearHmrServerError()\n          await propagateServerField(opts, 'reloadMatchers', undefined)\n        }\n      }\n\n      previousConflictingPagePaths = conflictingAppPagePaths\n\n      let clientRouterFilters: any\n      if (nextConfig.experimental.clientRouterFilter) {\n        clientRouterFilters = createClientRouterFilter(\n          Object.keys(appPaths),\n          nextConfig.experimental.clientRouterFilterRedirects\n            ? ((nextConfig as any)._originalRedirects || []).filter(\n                (r: any) => !r.internal\n              )\n            : [],\n          nextConfig.experimental.clientRouterFilterAllowedRate\n        )\n\n        if (\n          !previousClientRouterFilters ||\n          JSON.stringify(previousClientRouterFilters) !==\n            JSON.stringify(clientRouterFilters)\n        ) {\n          envChange = true\n          previousClientRouterFilters = clientRouterFilters\n        }\n      }\n\n      if (!usingTypeScript && enabledTypeScript) {\n        // we tolerate the error here as this is best effort\n        // and the manual install command will be shown\n        await verifyTypeScript(opts)\n          .then(() => {\n            tsconfigChange = true\n          })\n          .catch(() => {})\n      }\n\n      if (envChange || tsconfigChange) {\n        if (envChange) {\n          const { loadedEnvFiles } = loadEnvConfig(\n            dir,\n            process.env.NODE_ENV === 'development',\n            Log,\n            true,\n            (envFilePath) => {\n              Log.info(`Reload env: ${envFilePath}`)\n            }\n          )\n\n          if (usingTypeScript && nextConfig.experimental?.typedEnv) {\n            // do not await, this is not essential for further process\n            createEnvDefinitions({\n              distDir,\n              loadedEnvFiles: [\n                ...loadedEnvFiles,\n                {\n                  path: nextConfig.configFileName,\n                  env: nextConfig.env,\n                  contents: '',\n                },\n              ],\n            })\n          }\n\n          await propagateServerField(opts, 'loadEnvConfig', [\n            { dev: true, forceReload: true, silent: true },\n          ])\n        }\n        let tsconfigResult:\n          | UnwrapPromise<ReturnType<typeof loadJsConfig>>\n          | undefined\n\n        if (tsconfigChange) {\n          try {\n            tsconfigResult = await loadJsConfig(dir, nextConfig)\n          } catch (_) {\n            /* do we want to log if there are syntax errors in tsconfig while editing? */\n          }\n        }\n\n        if (hotReloader.turbopackProject) {\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          await hotReloader.turbopackProject.update({\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config: nextConfig,\n              dev: true,\n              distDir,\n              fetchCacheKeyPrefix:\n                opts.nextConfig.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // TODO: Implement\n              middlewareMatchers: undefined,\n              projectPath: opts.dir,\n            }),\n          })\n        }\n\n        hotReloader.activeWebpackConfigs?.forEach((config, idx) => {\n          const isClient = idx === 0\n          const isNodeServer = idx === 1\n          const isEdgeServer = idx === 2\n          const hasRewrites =\n            opts.fsChecker.rewrites.afterFiles.length > 0 ||\n            opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n            opts.fsChecker.rewrites.fallback.length > 0\n\n          if (tsconfigChange) {\n            config.resolve?.plugins?.forEach((plugin: any) => {\n              // look for the JsConfigPathsPlugin and update with\n              // the latest paths/baseUrl config\n              if (plugin instanceof JsConfigPathsPlugin && tsconfigResult) {\n                const { resolvedBaseUrl, jsConfig } = tsconfigResult\n                const currentResolvedBaseUrl = plugin.resolvedBaseUrl\n                const resolvedUrlIndex = config.resolve?.modules?.findIndex(\n                  (item) => item === currentResolvedBaseUrl?.baseUrl\n                )\n\n                if (resolvedBaseUrl) {\n                  if (\n                    resolvedBaseUrl.baseUrl !== currentResolvedBaseUrl?.baseUrl\n                  ) {\n                    // remove old baseUrl and add new one\n                    if (resolvedUrlIndex && resolvedUrlIndex > -1) {\n                      config.resolve?.modules?.splice(resolvedUrlIndex, 1)\n                    }\n\n                    // If the resolvedBaseUrl is implicit we only remove the previous value.\n                    // Only add the baseUrl if it's explicitly set in tsconfig/jsconfig\n                    if (!resolvedBaseUrl.isImplicit) {\n                      config.resolve?.modules?.push(resolvedBaseUrl.baseUrl)\n                    }\n                  }\n                }\n\n                if (jsConfig?.compilerOptions?.paths && resolvedBaseUrl) {\n                  Object.keys(plugin.paths).forEach((key) => {\n                    delete plugin.paths[key]\n                  })\n                  Object.assign(plugin.paths, jsConfig.compilerOptions.paths)\n                  plugin.resolvedBaseUrl = resolvedBaseUrl\n                }\n              }\n            })\n          }\n\n          if (envChange) {\n            config.plugins?.forEach((plugin: any) => {\n              // we look for the DefinePlugin definitions so we can\n              // update them on the active compilers\n              if (\n                plugin &&\n                typeof plugin.definitions === 'object' &&\n                plugin.definitions.__NEXT_DEFINE_ENV\n              ) {\n                const newDefine = getDefineEnv({\n                  isTurbopack: false,\n                  clientRouterFilters,\n                  config: nextConfig,\n                  dev: true,\n                  distDir,\n                  fetchCacheKeyPrefix:\n                    opts.nextConfig.experimental.fetchCacheKeyPrefix,\n                  hasRewrites,\n                  isClient,\n                  isEdgeServer,\n                  isNodeServer,\n                  middlewareMatchers: undefined,\n                  projectPath: opts.dir,\n                })\n\n                Object.keys(plugin.definitions).forEach((key) => {\n                  if (!(key in newDefine)) {\n                    delete plugin.definitions[key]\n                  }\n                })\n                Object.assign(plugin.definitions, newDefine)\n              }\n            })\n          }\n        })\n        await hotReloader.invalidate({\n          reloadAfterInvalidation: envChange,\n        })\n      }\n\n      if (nestedMiddleware.length > 0) {\n        Log.error(\n          new NestedMiddlewareError(\n            nestedMiddleware,\n            dir,\n            (pagesDir || appDir)!\n          ).message\n        )\n        nestedMiddleware = []\n      }\n\n      // Make sure to sort parallel routes to make the result deterministic.\n      serverFields.appPathRoutes = Object.fromEntries(\n        Object.entries(appPaths).map(([k, v]) => [k, v.sort()])\n      )\n      await propagateServerField(\n        opts,\n        'appPathRoutes',\n        serverFields.appPathRoutes\n      )\n\n      // TODO: pass this to fsChecker/next-dev-server?\n      serverFields.middleware = middlewareMatchers\n        ? {\n            match: null as any,\n            page: '/',\n            matchers: middlewareMatchers,\n          }\n        : undefined\n\n      await propagateServerField(opts, 'middleware', serverFields.middleware)\n      serverFields.hasAppNotFound = hasRootAppNotFound\n\n      opts.fsChecker.middlewareMatcher = serverFields.middleware?.matchers\n        ? getMiddlewareRouteMatcher(serverFields.middleware?.matchers)\n        : undefined\n\n      const interceptionRoutes = generateInterceptionRoutesRewrites(\n        Object.keys(appPaths),\n        opts.nextConfig.basePath\n      ).map((item) =>\n        buildCustomRoute(\n          'before_files_rewrite',\n          item,\n          opts.nextConfig.basePath,\n          opts.nextConfig.experimental.caseSensitiveRoutes\n        )\n      )\n\n      opts.fsChecker.rewrites.beforeFiles.push(...interceptionRoutes)\n\n      const exportPathMap =\n        (typeof nextConfig.exportPathMap === 'function' &&\n          (await nextConfig.exportPathMap?.(\n            {},\n            {\n              dev: true,\n              dir: opts.dir,\n              outDir: null,\n              distDir: distDir,\n              buildId: 'development',\n            }\n          ))) ||\n        {}\n\n      const exportPathMapEntries = Object.entries(exportPathMap || {})\n\n      if (exportPathMapEntries.length > 0) {\n        opts.fsChecker.exportPathMapRoutes = exportPathMapEntries.map(\n          ([key, value]) =>\n            buildCustomRoute(\n              'before_files_rewrite',\n              {\n                source: key,\n                destination: `${value.page}${\n                  value.query ? '?' : ''\n                }${qs.stringify(value.query)}`,\n              },\n              opts.nextConfig.basePath,\n              opts.nextConfig.experimental.caseSensitiveRoutes\n            )\n        )\n      }\n\n      try {\n        // we serve a separate manifest with all pages for the client in\n        // dev mode so that we can match a page after a rewrite on the client\n        // before it has been built and is populated in the _buildManifest\n        const sortedRoutes = getSortedRoutes(routedPages)\n\n        opts.fsChecker.dynamicRoutes = sortedRoutes.map(\n          (page): FilesystemDynamicRoute => {\n            const regex = getRouteRegex(page)\n            return {\n              regex: regex.re.toString(),\n              match: getRouteMatcher(regex),\n              page,\n            }\n          }\n        )\n\n        const dataRoutes: typeof opts.fsChecker.dynamicRoutes = []\n\n        for (const page of sortedRoutes) {\n          const route = buildDataRoute(page, 'development')\n          const routeRegex = getRouteRegex(route.page)\n          dataRoutes.push({\n            ...route,\n            regex: routeRegex.re.toString(),\n            match: getRouteMatcher({\n              // TODO: fix this in the manifest itself, must also be fixed in\n              // upstream builder that relies on this\n              re: opts.nextConfig.i18n\n                ? new RegExp(\n                    route.dataRouteRegex.replace(\n                      `/development/`,\n                      `/development/(?<nextLocale>[^/]+?)/`\n                    )\n                  )\n                : new RegExp(route.dataRouteRegex),\n              groups: routeRegex.groups,\n            }),\n          })\n        }\n        opts.fsChecker.dynamicRoutes.unshift(...dataRoutes)\n\n        if (!prevSortedRoutes?.every((val, idx) => val === sortedRoutes[idx])) {\n          const addedRoutes = sortedRoutes.filter(\n            (route) => !prevSortedRoutes.includes(route)\n          )\n          const removedRoutes = prevSortedRoutes.filter(\n            (route) => !sortedRoutes.includes(route)\n          )\n\n          // emit the change so clients fetch the update\n          hotReloader.send({\n            action: HMR_ACTIONS_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE,\n            data: [\n              {\n                devPagesManifest: true,\n              },\n            ],\n          })\n\n          addedRoutes.forEach((route) => {\n            hotReloader.send({\n              action: HMR_ACTIONS_SENT_TO_BROWSER.ADDED_PAGE,\n              data: [route],\n            })\n          })\n\n          removedRoutes.forEach((route) => {\n            hotReloader.send({\n              action: HMR_ACTIONS_SENT_TO_BROWSER.REMOVED_PAGE,\n              data: [route],\n            })\n          })\n        }\n        prevSortedRoutes = sortedRoutes\n\n        if (!resolved) {\n          resolve()\n          resolved = true\n        }\n      } catch (e) {\n        if (!resolved) {\n          reject(e)\n          resolved = true\n        } else {\n          Log.warn('Failed to reload dynamic routes:', e)\n        }\n      } finally {\n        // Reload the matchers. The filesystem would have been written to,\n        // and the matchers need to re-scan it to update the router.\n        await propagateServerField(opts, 'reloadMatchers', undefined)\n      }\n    })\n\n    wp.watch({ directories: [dir], startTime: 0 })\n  })\n\n  const clientPagesManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_PAGES_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(clientPagesManifestPath)\n\n  const devMiddlewareManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${DEV_CLIENT_MIDDLEWARE_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(devMiddlewareManifestPath)\n\n  const devTurbopackMiddlewareManifestPath = `/_next/${CLIENT_STATIC_FILES_PATH}/development/${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n  opts.fsChecker.devVirtualFsItems.add(devTurbopackMiddlewareManifestPath)\n\n  async function requestHandler(req: IncomingMessage, res: ServerResponse) {\n    const parsedUrl = url.parse(req.url || '/')\n\n    if (parsedUrl.pathname?.includes(clientPagesManifestPath)) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(\n        JSON.stringify({\n          pages: prevSortedRoutes.filter(\n            (route) => !opts.fsChecker.appFiles.has(route)\n          ),\n        })\n      )\n      return { finished: true }\n    }\n\n    if (\n      parsedUrl.pathname?.includes(devMiddlewareManifestPath) ||\n      parsedUrl.pathname?.includes(devTurbopackMiddlewareManifestPath)\n    ) {\n      res.statusCode = 200\n      res.setHeader('Content-Type', 'application/json; charset=utf-8')\n      res.end(JSON.stringify(serverFields.middleware?.matchers || []))\n      return { finished: true }\n    }\n    return { finished: false }\n  }\n\n  function logErrorWithOriginalStack(\n    err: unknown,\n    type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'\n  ) {\n    if (err instanceof ModuleBuildError) {\n      // Errors that may come from issues from the user's code\n      Log.error(err.message)\n    } else if (err instanceof TurbopackInternalError) {\n      // An internal Turbopack error that has been handled by next-swc, written\n      // to disk and a simplified message shown to user on the Rust side.\n    } else if (type === 'warning') {\n      Log.warn(err)\n    } else if (type === 'app-dir') {\n      Log.error(err)\n    } else if (type) {\n      Log.error(`${type}:`, err)\n    } else {\n      Log.error(err)\n    }\n  }\n\n  return {\n    serverFields,\n    hotReloader,\n    requestHandler,\n    logErrorWithOriginalStack,\n\n    async ensureMiddleware(requestUrl?: string) {\n      if (!serverFields.actualMiddlewareFile) return\n      return hotReloader.ensurePage({\n        page: serverFields.actualMiddlewareFile,\n        clientOnly: false,\n        definition: undefined,\n        url: requestUrl,\n      })\n    },\n  }\n}\n\nexport async function setupDevBundler(opts: SetupOpts) {\n  const isSrcDir = path\n    .relative(opts.dir, opts.pagesDir || opts.appDir || '')\n    .startsWith('src')\n\n  const result = await startWatcher(opts)\n\n  opts.telemetry.record(\n    eventCliSession(\n      path.join(opts.dir, opts.nextConfig.distDir),\n      opts.nextConfig,\n      {\n        webpackVersion: 5,\n        isSrcDir,\n        turboFlag: !!opts.turbo,\n        cliCommand: 'dev',\n        appDir: !!opts.appDir,\n        pagesDir: !!opts.pagesDir,\n        isCustomServer: !!opts.isCustomServer,\n        hasNowJson: !!(await findUp('now.json', { cwd: opts.dir })),\n      }\n    )\n  )\n\n  // Track build features for dev server here:\n  opts.telemetry.record({\n    eventName: EVENT_BUILD_FEATURE_USAGE,\n    payload: {\n      featureName: 'turbopackPersistentCaching',\n      invocationCount: isPersistentCachingEnabled(opts.nextConfig) ? 1 : 0,\n    },\n  })\n\n  return result\n}\n\nexport type DevBundler = Awaited<ReturnType<typeof setupDevBundler>>\n\n// Returns a trace rewritten through Turbopack's sourcemaps\n"],"names":["getPageStaticInfo","createDefineEnv","fs","mkdir","url","path","qs","Watchpack","loadEnvConfig","findUp","buildCustomRoute","Log","HotReloaderWebpack","setGlobal","loadJsConfig","createValidFileMatcher","EVENT_BUILD_FEATURE_USAGE","eventCliSession","getSortedRoutes","getStaticInfoIncludingLayouts","sortByPageExts","verifyTypeScriptSetup","verifyPartytownSetup","getRouteRegex","normalizeAppPath","buildDataRoute","getRouteMatcher","normalizePathSep","createClientRouterFilter","absolutePathToPage","generateInterceptionRoutesRewrites","CLIENT_STATIC_FILES_PATH","DEV_CLIENT_PAGES_MANIFEST","DEV_CLIENT_MIDDLEWARE_MANIFEST","PHASE_DEVELOPMENT_SERVER","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","ROUTES_MANIFEST","PRERENDER_MANIFEST","getMiddlewareRouteMatcher","isMiddlewareFile","NestedMiddlewareError","isInstrumentationHookFile","getPossibleMiddlewareFilenames","getPossibleInstrumentationHookFilenames","devPageFiles","HMR_ACTIONS_SENT_TO_BROWSER","PAGE_TYPES","createHotReloaderTurbopack","generateEncryptionKeyBase64","isMetadataRouteFile","normalizeMetadataPageToRoute","createEnvDefinitions","JsConfigPathsPlugin","store","consoleStore","isPersistentCachingEnabled","ModuleBuildError","TurbopackInternalError","getDefineEnv","verifyTypeScript","opts","usingTypeScript","verifyResult","dir","distDir","nextConfig","intentDirs","pagesDir","appDir","filter","Boolean","typeCheckPreflight","tsconfigPath","typescript","disableStaticImages","images","hasAppDir","hasPagesDir","version","propagateServerField","field","args","renderServer","instance","startWatcher","resetFetch","useFileSystemPublicRoutes","join","distTypesDir","existsSync","recursive","validFileMatcher","pageExtensions","serverFields","setState","logging","hotReloader","turbo","config","buildId","encryptionKey","isBuild","telemetry","rewrites","fsChecker","previewProps","prerenderManifest","preview","start","routesManifestPath","routesManifest","caseSensitive","experimental","caseSensitiveRoutes","basePath","redirects","headers","i18n","undefined","skipMiddlewareUrlNormalize","promises","writeFile","JSON","stringify","prerenderManifestPath","nextScriptWorkers","ensureCallback","ensure","item","type","ensurePage","clientOnly","page","itemPath","isApp","definition","resolved","prevSortedRoutes","Promise","resolve","reject","readdir","_","files","length","pages","app","directories","rootDir","nestedMiddleware","envFiles","map","file","push","tsconfigPaths","wp","ignored","pathname","some","startsWith","d","fileWatchTimes","Map","enabledTypeScript","previousClientRouterFilters","previousConflictingPagePaths","Set","on","middlewareMatchers","routedPages","knownFiles","getTimeInfoEntries","appPaths","pageNameSet","conflictingAppPagePaths","appPageFilePaths","pagesPageFilePaths","envChange","tsconfigChange","conflictingPageChange","hasRootAppNotFound","appFiles","pageFiles","clear","sortedKnownFiles","keys","sort","fileName","includes","meta","get","watchTime","watchTimeChange","timestamp","set","endsWith","accuracy","isPageFile","isAppPath","isPagePath","rootFile","extensions","keepIndex","pagesType","ROOT","staticInfo","pageFilePath","isDev","isInsideAppDir","output","error","actualMiddlewareFile","middleware","matchers","regexp","originalSource","actualInstrumentationHookFile","add","pageName","APP","PAGES","replace","pageType","generateSitemaps","generateImageMetadata","isRootNotFound","isAppRouterPage","originalPageName","nextDataRoutes","has","test","numConflicting","size","errorMessage","p","appPath","relative","pagesPath","setHmrServerError","Error","clearHmrServerError","clientRouterFilters","clientRouterFilter","Object","clientRouterFilterRedirects","_originalRedirects","r","internal","clientRouterFilterAllowedRate","then","catch","loadedEnvFiles","process","env","NODE_ENV","envFilePath","info","typedEnv","configFileName","contents","dev","forceReload","silent","tsconfigResult","turbopackProject","hasRewrites","afterFiles","beforeFiles","fallback","update","defineEnv","isTurbopack","fetchCacheKeyPrefix","projectPath","activeWebpackConfigs","forEach","idx","isClient","isNodeServer","isEdgeServer","plugins","plugin","jsConfig","resolvedBaseUrl","currentResolvedBaseUrl","resolvedUrlIndex","modules","findIndex","baseUrl","splice","isImplicit","compilerOptions","paths","key","assign","definitions","__NEXT_DEFINE_ENV","newDefine","invalidate","reloadAfterInvalidation","message","appPathRoutes","fromEntries","entries","k","v","match","hasAppNotFound","middlewareMatcher","interceptionRoutes","exportPathMap","outDir","exportPathMapEntries","exportPathMapRoutes","value","source","destination","query","sortedRoutes","dynamicRoutes","regex","re","toString","dataRoutes","route","routeRegex","RegExp","dataRouteRegex","groups","unshift","every","val","addedRoutes","removedRoutes","send","action","DEV_PAGES_MANIFEST_UPDATE","data","devPagesManifest","ADDED_PAGE","REMOVED_PAGE","e","warn","watch","startTime","clientPagesManifestPath","devVirtualFsItems","devMiddlewareManifestPath","devTurbopackMiddlewareManifestPath","requestHandler","req","res","parsedUrl","parse","statusCode","setHeader","end","finished","logErrorWithOriginalStack","err","ensureMiddleware","requestUrl","setupDevBundler","isSrcDir","result","record","webpackVersion","turboFlag","cliCommand","isCustomServer","hasNowJson","cwd","eventName","payload","featureName","invocationCount"],"mappings":"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","ignoreList":[0]}