{"version":3,"sources":["../../../../src/shared/lib/devtool/app-segment-tree.tsx"],"sourcesContent":["'use client'\n\nimport { type ReactNode, useEffect, useSyncExternalStore } from 'react'\nimport { createTrie, type Trie } from './trie'\n\nexport type SegmentNode = {\n  type: string\n  pagePath: string\n}\n\ntype DevtoolClientState = {\n  tree?: Trie<SegmentNode>\n}\n\nconst DEFAULT_CLIENT_STATE =\n  typeof window === 'undefined'\n    ? undefined\n    : createTrie<SegmentNode>({\n        getKey: (item) => item.pagePath,\n      })\n\ndeclare global {\n  interface Window {\n    __NEXT_DEVTOOLS_CLIENT_STATE?: DevtoolClientState\n  }\n}\n\nfunction getSegmentTreeClientState(): DevtoolClientState {\n  if (typeof window === 'undefined') {\n    return {}\n  }\n  if (!window.__NEXT_DEVTOOLS_CLIENT_STATE) {\n    window.__NEXT_DEVTOOLS_CLIENT_STATE = {\n      // Initial state\n      tree: DEFAULT_CLIENT_STATE,\n    }\n  }\n  return window.__NEXT_DEVTOOLS_CLIENT_STATE\n}\n\nconst listeners = typeof window === 'undefined' ? null : new Set<() => void>()\n\nconst createSegmentTreeStore = (): {\n  subscribe: (callback: () => void) => () => void\n  getSnapshot: () => DevtoolClientState\n  getServerSnapshot: () => undefined\n} => {\n  if (typeof window === 'undefined') {\n    return {\n      subscribe: () => () => void 0,\n      getSnapshot: () => ({}),\n      getServerSnapshot: () => undefined,\n    }\n  }\n\n  // return a store that can be used by useSyncExternalStore\n  return {\n    subscribe: (callback) => {\n      listeners?.add(callback)\n      return () => listeners?.delete(callback)\n    },\n    getSnapshot: () => {\n      return getSegmentTreeClientState()\n    },\n    getServerSnapshot: () => {\n      return undefined\n    },\n  }\n}\n\nconst { subscribe, getSnapshot, getServerSnapshot } = createSegmentTreeStore()\n\nexport function SegmentViewNode({\n  type,\n  pagePath,\n  children,\n}: {\n  type: string\n  pagePath: string\n  children: ReactNode\n}) {\n  const clientState = getSegmentTreeClientState()\n  const tree = clientState.tree\n\n  useEffect(() => {\n    if (!tree) {\n      return\n    }\n    tree.insert({\n      type,\n      pagePath,\n    })\n  }, [type, pagePath, tree])\n\n  return children\n}\n\nexport function useSegmentTreeClientState() {\n  const state = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot)\n  return state\n}\n"],"names":["SegmentViewNode","useSegmentTreeClientState","DEFAULT_CLIENT_STATE","window","undefined","createTrie","getKey","item","pagePath","getSegmentTreeClientState","__NEXT_DEVTOOLS_CLIENT_STATE","tree","listeners","Set","createSegmentTreeStore","subscribe","getSnapshot","getServerSnapshot","callback","add","delete","type","children","clientState","useEffect","insert","state","useSyncExternalStore"],"mappings":"AAAA;;;;;;;;;;;;;;;;IAwEgBA,eAAe;eAAfA;;IAyBAC,yBAAyB;eAAzBA;;;uBA/FgD;sBAC1B;AAWtC,MAAMC,uBACJ,OAAOC,WAAW,cACdC,YACAC,IAAAA,gBAAU,EAAc;IACtBC,QAAQ,CAACC,OAASA,KAAKC,QAAQ;AACjC;AAQN,SAASC;IACP,IAAI,OAAON,WAAW,aAAa;QACjC,OAAO,CAAC;IACV;IACA,IAAI,CAACA,OAAOO,4BAA4B,EAAE;QACxCP,OAAOO,4BAA4B,GAAG;YACpC,gBAAgB;YAChBC,MAAMT;QACR;IACF;IACA,OAAOC,OAAOO,4BAA4B;AAC5C;AAEA,MAAME,YAAY,OAAOT,WAAW,cAAc,OAAO,IAAIU;AAE7D,MAAMC,yBAAyB;IAK7B,IAAI,OAAOX,WAAW,aAAa;QACjC,OAAO;YACLY,WAAW,IAAM,IAAM,KAAK;YAC5BC,aAAa,IAAO,CAAA,CAAC,CAAA;YACrBC,mBAAmB,IAAMb;QAC3B;IACF;IAEA,0DAA0D;IAC1D,OAAO;QACLW,WAAW,CAACG;YACVN,6BAAAA,UAAWO,GAAG,CAACD;YACf,OAAO,IAAMN,6BAAAA,UAAWQ,MAAM,CAACF;QACjC;QACAF,aAAa;YACX,OAAOP;QACT;QACAQ,mBAAmB;YACjB,OAAOb;QACT;IACF;AACF;AAEA,MAAM,EAAEW,SAAS,EAAEC,WAAW,EAAEC,iBAAiB,EAAE,GAAGH;AAE/C,SAASd,gBAAgB,KAQ/B;IAR+B,IAAA,EAC9BqB,IAAI,EACJb,QAAQ,EACRc,QAAQ,EAKT,GAR+B;IAS9B,MAAMC,cAAcd;IACpB,MAAME,OAAOY,YAAYZ,IAAI;IAE7Ba,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACb,MAAM;YACT;QACF;QACAA,KAAKc,MAAM,CAAC;YACVJ;YACAb;QACF;IACF,GAAG;QAACa;QAAMb;QAAUG;KAAK;IAEzB,OAAOW;AACT;AAEO,SAASrB;IACd,MAAMyB,QAAQC,IAAAA,2BAAoB,EAACZ,WAAWC,aAAaC;IAC3D,OAAOS;AACT","ignoreList":[0]}