{"version":3,"sources":["../../../../../src/client/components/react-dev-overlay/app/app-dev-overlay.tsx"],"sourcesContent":["import {\n  ACTION_ERROR_OVERLAY_OPEN,\n  type OverlayDispatch,\n  type OverlayState,\n} from '../shared'\nimport type { GlobalErrorComponent } from '../../global-error'\n\nimport { useCallback, useEffect } from 'react'\nimport { AppDevOverlayErrorBoundary } from './app-dev-overlay-error-boundary'\nimport { FontStyles } from '../font/font-styles'\nimport { DevOverlay } from '../ui/dev-overlay'\nimport { handleClientError } from '../../errors/use-error-handler'\nimport { isNextRouterError } from '../../is-next-router-error'\nimport { MISSING_ROOT_TAGS_ERROR } from '../../../../shared/lib/errors/constants'\n\nfunction readSsrError(): (Error & { digest?: string }) | null {\n  if (typeof document === 'undefined') {\n    return null\n  }\n\n  const ssrErrorTemplateTag = document.querySelector(\n    'template[data-next-error-message]'\n  )\n  if (ssrErrorTemplateTag) {\n    const message: string = ssrErrorTemplateTag.getAttribute(\n      'data-next-error-message'\n    )!\n    const stack = ssrErrorTemplateTag.getAttribute('data-next-error-stack')\n    const digest = ssrErrorTemplateTag.getAttribute('data-next-error-digest')\n    const error = new Error(message)\n    if (digest) {\n      ;(error as any).digest = digest\n    }\n    // Skip Next.js SSR'd internal errors that which will be handled by the error boundaries.\n    if (isNextRouterError(error)) {\n      return null\n    }\n    error.stack = stack || ''\n    return error\n  }\n\n  return null\n}\n\n// Needs to be in the same error boundary as the shell.\n// If it commits, we know we recovered from an SSR error.\n// If it doesn't commit, we errored again and React will take care of error reporting.\nfunction ReplaySsrOnlyErrors({\n  onBlockingError,\n}: {\n  onBlockingError: () => void\n}) {\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to read during render. The attributes will be gone after commit.\n    const ssrError = readSsrError()\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      if (ssrError !== null) {\n        // TODO(veil): Include original Owner Stack (NDX-905)\n        // TODO(veil): Mark as recoverable error\n        // TODO(veil): console.error\n        handleClientError(ssrError)\n\n        // If it's missing root tags, we can't recover, make it blocking.\n        if (ssrError.digest === MISSING_ROOT_TAGS_ERROR) {\n          onBlockingError()\n        }\n      }\n    }, [ssrError, onBlockingError])\n  }\n\n  return null\n}\n\nexport function AppDevOverlay({\n  state,\n  dispatch,\n  globalError,\n  children,\n}: {\n  state: OverlayState\n  dispatch: OverlayDispatch\n  globalError: [GlobalErrorComponent, React.ReactNode]\n  children: React.ReactNode\n}) {\n  const openOverlay = useCallback(() => {\n    dispatch({ type: ACTION_ERROR_OVERLAY_OPEN })\n  }, [dispatch])\n\n  return (\n    <>\n      <AppDevOverlayErrorBoundary\n        globalError={globalError}\n        onError={openOverlay}\n      >\n        <ReplaySsrOnlyErrors onBlockingError={openOverlay} />\n        {children}\n      </AppDevOverlayErrorBoundary>\n      <>\n        {/* Fonts can only be loaded outside the Shadow DOM. */}\n        <FontStyles />\n        <DevOverlay state={state} dispatch={dispatch} />\n      </>\n    </>\n  )\n}\n"],"names":["ACTION_ERROR_OVERLAY_OPEN","useCallback","useEffect","AppDevOverlayErrorBoundary","FontStyles","DevOverlay","handleClientError","isNextRouterError","MISSING_ROOT_TAGS_ERROR","readSsrError","document","ssrErrorTemplateTag","querySelector","message","getAttribute","stack","digest","error","Error","ReplaySsrOnlyErrors","onBlockingError","process","env","NODE_ENV","ssrError","AppDevOverlay","state","dispatch","globalError","children","openOverlay","type","onError"],"mappings":";AAAA,SACEA,yBAAyB,QAGpB,YAAW;AAGlB,SAASC,WAAW,EAAEC,SAAS,QAAQ,QAAO;AAC9C,SAASC,0BAA0B,QAAQ,mCAAkC;AAC7E,SAASC,UAAU,QAAQ,sBAAqB;AAChD,SAASC,UAAU,QAAQ,oBAAmB;AAC9C,SAASC,iBAAiB,QAAQ,iCAAgC;AAClE,SAASC,iBAAiB,QAAQ,6BAA4B;AAC9D,SAASC,uBAAuB,QAAQ,0CAAyC;AAEjF,SAASC;IACP,IAAI,OAAOC,aAAa,aAAa;QACnC,OAAO;IACT;IAEA,MAAMC,sBAAsBD,SAASE,aAAa,CAChD;IAEF,IAAID,qBAAqB;QACvB,MAAME,UAAkBF,oBAAoBG,YAAY,CACtD;QAEF,MAAMC,QAAQJ,oBAAoBG,YAAY,CAAC;QAC/C,MAAME,SAASL,oBAAoBG,YAAY,CAAC;QAChD,MAAMG,QAAQ,qBAAkB,CAAlB,IAAIC,MAAML,UAAV,qBAAA;mBAAA;wBAAA;0BAAA;QAAiB;QAC/B,IAAIG,QAAQ;;YACRC,MAAcD,MAAM,GAAGA;QAC3B;QACA,yFAAyF;QACzF,IAAIT,kBAAkBU,QAAQ;YAC5B,OAAO;QACT;QACAA,MAAMF,KAAK,GAAGA,SAAS;QACvB,OAAOE;IACT;IAEA,OAAO;AACT;AAEA,uDAAuD;AACvD,yDAAyD;AACzD,sFAAsF;AACtF,SAASE,oBAAoB,KAI5B;IAJ4B,IAAA,EAC3BC,eAAe,EAGhB,GAJ4B;IAK3B,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;QACzC,wEAAwE;QACxE,MAAMC,WAAWf;QACjB,sDAAsD;QACtDP,UAAU;YACR,IAAIsB,aAAa,MAAM;gBACrB,qDAAqD;gBACrD,wCAAwC;gBACxC,4BAA4B;gBAC5BlB,kBAAkBkB;gBAElB,iEAAiE;gBACjE,IAAIA,SAASR,MAAM,KAAKR,yBAAyB;oBAC/CY;gBACF;YACF;QACF,GAAG;YAACI;YAAUJ;SAAgB;IAChC;IAEA,OAAO;AACT;AAEA,OAAO,SAASK,cAAc,KAU7B;IAV6B,IAAA,EAC5BC,KAAK,EACLC,QAAQ,EACRC,WAAW,EACXC,QAAQ,EAMT,GAV6B;IAW5B,MAAMC,cAAc7B,YAAY;QAC9B0B,SAAS;YAAEI,MAAM/B;QAA0B;IAC7C,GAAG;QAAC2B;KAAS;IAEb,qBACE;;0BACE,MAACxB;gBACCyB,aAAaA;gBACbI,SAASF;;kCAET,KAACX;wBAAoBC,iBAAiBU;;oBACrCD;;;0BAEH;;kCAEE,KAACzB;kCACD,KAACC;wBAAWqB,OAAOA;wBAAOC,UAAUA;;;;;;AAI5C","ignoreList":[0]}