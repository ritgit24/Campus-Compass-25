import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useRef, useState, forwardRef } from 'react';
export const Resizer = /*#__PURE__*/ forwardRef(function Resizer(param, resizerRef) {
    let { children, measure, ...props } = param;
    const ref = useRef(null);
    const [height, measuring] = useMeasureHeight(ref, measure);
    return /*#__PURE__*/ _jsx("div", {
        ...props,
        ref: resizerRef,
        // [x] Don't animate on initial load
        // [x] No duplicate elements
        // [x] Responds to content growth
        style: {
            height: measuring ? 'auto' : height,
            transition: 'height 250ms var(--timing-swift)'
        },
        children: /*#__PURE__*/ _jsx("div", {
            ref: ref,
            children: children
        })
    });
});
function useMeasureHeight(ref, measure) {
    const [height, setHeight] = useState(0);
    const [measuring, setMeasuring] = useState(true);
    useEffect(()=>{
        if (!measure) {
            return;
        }
        let timerId;
        const el = ref.current;
        if (!el) {
            return;
        }
        const observer = new ResizeObserver((param)=>{
            let [{ contentRect }] = param;
            clearTimeout(timerId);
            timerId = window.setTimeout(()=>{
                setMeasuring(false);
            }, 100);
            setHeight(contentRect.height);
        });
        observer.observe(el);
        return ()=>observer.disconnect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        measure
    ]);
    return [
        height,
        measuring
    ];
}

//# sourceMappingURL=index.js.map