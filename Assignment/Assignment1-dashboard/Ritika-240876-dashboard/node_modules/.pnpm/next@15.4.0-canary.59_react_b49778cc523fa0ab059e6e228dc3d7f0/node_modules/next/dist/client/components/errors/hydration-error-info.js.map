{"version":3,"sources":["../../../../src/client/components/errors/hydration-error-info.ts"],"sourcesContent":["export type HydrationErrorState = {\n  // Hydration warning template format: <message> <serverContent> <clientContent>\n  warning?: [string, string, string]\n  serverContent?: string\n  clientContent?: string\n  // React 19 hydration diff format: <notes> <link> <component diff?>\n  notes?: string\n  reactOutputComponentDiff?: string\n}\n\ntype NullableText = string | null | undefined\n\nexport const hydrationErrorState: HydrationErrorState = {}\n\n// https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference\nconst htmlTagsWarnings = new Set([\n  'Warning: In HTML, %s cannot be a child of <%s>.%s\\nThis will cause a hydration error.%s',\n  'Warning: In HTML, %s cannot be a descendant of <%s>.\\nThis will cause a hydration error.%s',\n  'Warning: In HTML, text nodes cannot be a child of <%s>.\\nThis will cause a hydration error.',\n  \"Warning: In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\\nThis will cause a hydration error.\",\n  'Warning: Expected server HTML to contain a matching <%s> in <%s>.%s',\n  'Warning: Did not expect server HTML to contain a <%s> in <%s>.%s',\n])\nconst textAndTagsMismatchWarnings = new Set([\n  'Warning: Expected server HTML to contain a matching text node for \"%s\" in <%s>.%s',\n  'Warning: Did not expect server HTML to contain the text node \"%s\" in <%s>.%s',\n])\n\nexport const getHydrationWarningType = (\n  message: NullableText\n): 'tag' | 'text' | 'text-in-tag' => {\n  if (typeof message !== 'string') {\n    // TODO: Doesn't make sense to treat no message as a hydration error message.\n    // We should bail out somewhere earlier.\n    return 'text'\n  }\n\n  const normalizedMessage = message.startsWith('Warning: ')\n    ? message\n    : `Warning: ${message}`\n\n  if (isHtmlTagsWarning(normalizedMessage)) return 'tag'\n  if (isTextInTagsMismatchWarning(normalizedMessage)) return 'text-in-tag'\n\n  return 'text'\n}\n\nconst isHtmlTagsWarning = (message: string) => htmlTagsWarnings.has(message)\n\nconst isTextInTagsMismatchWarning = (msg: string) =>\n  textAndTagsMismatchWarnings.has(msg)\n"],"names":["getHydrationWarningType","hydrationErrorState","htmlTagsWarnings","Set","textAndTagsMismatchWarnings","message","normalizedMessage","startsWith","isHtmlTagsWarning","isTextInTagsMismatchWarning","has","msg"],"mappings":";;;;;;;;;;;;;;;IA4BaA,uBAAuB;eAAvBA;;IAhBAC,mBAAmB;eAAnBA;;;AAAN,MAAMA,sBAA2C,CAAC;AAEzD,iIAAiI;AACjI,MAAMC,mBAAmB,IAAIC,IAAI;IAC/B;IACA;IACA;IACA;IACA;IACA;CACD;AACD,MAAMC,8BAA8B,IAAID,IAAI;IAC1C;IACA;CACD;AAEM,MAAMH,0BAA0B,CACrCK;IAEA,IAAI,OAAOA,YAAY,UAAU;QAC/B,6EAA6E;QAC7E,wCAAwC;QACxC,OAAO;IACT;IAEA,MAAMC,oBAAoBD,QAAQE,UAAU,CAAC,eACzCF,UACA,AAAC,cAAWA;IAEhB,IAAIG,kBAAkBF,oBAAoB,OAAO;IACjD,IAAIG,4BAA4BH,oBAAoB,OAAO;IAE3D,OAAO;AACT;AAEA,MAAME,oBAAoB,CAACH,UAAoBH,iBAAiBQ,GAAG,CAACL;AAEpE,MAAMI,8BAA8B,CAACE,MACnCP,4BAA4BM,GAAG,CAACC","ignoreList":[0]}