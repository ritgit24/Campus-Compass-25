{"version":3,"sources":["../../../src/client/react-client-callbacks/error-boundary-callbacks.ts"],"sourcesContent":["// This file is only used in app router due to the specific error state handling.\n\nimport type { ErrorInfo } from 'react'\nimport {\n  setOwnerStackIfAvailable,\n  setComponentStack,\n  coerceError,\n} from '../components/errors/stitched-error'\nimport { handleClientError } from '../components/errors/use-error-handler'\nimport { isNextRouterError } from '../components/is-next-router-error'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { reportGlobalError } from './report-global-error'\nimport { originConsoleError } from '../components/globals/intercept-console-error'\nimport { ErrorBoundaryHandler } from '../components/error-boundary'\nimport DefaultErrorBoundary from '../components/global-error'\n\nexport function onCaughtError(\n  thrownValue: unknown,\n  errorInfo: ErrorInfo & { errorBoundary?: React.Component }\n) {\n  const errorBoundaryComponent = errorInfo.errorBoundary?.constructor\n\n  let isImplicitErrorBoundary\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { AppDevOverlayErrorBoundary } =\n      require('../components/react-dev-overlay/app/app-dev-overlay-error-boundary') as typeof import('../components/react-dev-overlay/app/app-dev-overlay-error-boundary')\n\n    isImplicitErrorBoundary =\n      errorBoundaryComponent === AppDevOverlayErrorBoundary\n  }\n\n  isImplicitErrorBoundary =\n    isImplicitErrorBoundary ||\n    (errorBoundaryComponent === ErrorBoundaryHandler &&\n      (errorInfo.errorBoundary! as InstanceType<typeof ErrorBoundaryHandler>)\n        .props.errorComponent === DefaultErrorBoundary)\n\n  if (isImplicitErrorBoundary) {\n    // We don't consider errors caught unless they're caught by an explicit error\n    // boundary. The built-in ones are considered implicit.\n    // This mimics how the same app would behave without Next.js.\n    return onUncaughtError(thrownValue, errorInfo)\n  }\n\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(thrownValue) || isNextRouterError(thrownValue)) return\n\n  if (process.env.NODE_ENV !== 'production') {\n    const errorBoundaryName =\n      // read react component displayName\n      (errorBoundaryComponent as any)?.displayName ||\n      errorBoundaryComponent?.name ||\n      'Unknown'\n\n    const componentThatErroredFrame = errorInfo?.componentStack?.split('\\n')[1]\n\n    // Match chrome or safari stack trace\n    const matches =\n      // regex to match the function name in the stack trace\n      // example 1: at Page (http://localhost:3000/_next/static/chunks/pages/index.js?ts=1631600000000:2:1)\n      // example 2: Page@http://localhost:3000/_next/static/chunks/pages/index.js?ts=1631600000000:2:1\n      componentThatErroredFrame?.match(/\\s+at (\\w+)\\s+|(\\w+)@/) ?? []\n    const componentThatErroredName = matches[1] || matches[2] || 'Unknown'\n\n    // Create error location with errored component and error boundary, to match the behavior of default React onCaughtError handler.\n    const errorBoundaryMessage = `It was handled by the <${errorBoundaryName}> error boundary.`\n    const componentErrorMessage = componentThatErroredName\n      ? `The above error occurred in the <${componentThatErroredName}> component.`\n      : `The above error occurred in one of your components.`\n\n    const errorLocation = `${componentErrorMessage} ${errorBoundaryMessage}`\n\n    const error = coerceError(thrownValue)\n    setOwnerStackIfAvailable(error)\n    // TODO: change to passing down errorInfo later\n    // In development mode, pass along the component stack to the error\n    if (errorInfo.componentStack) {\n      setComponentStack(error, errorInfo.componentStack)\n    }\n\n    // Log and report the error with location but without modifying the error stack\n    originConsoleError('%o\\n\\n%s', thrownValue, errorLocation)\n\n    handleClientError(error)\n  } else {\n    originConsoleError(thrownValue)\n  }\n}\n\nexport function onUncaughtError(\n  thrownValue: unknown,\n  errorInfo: React.ErrorInfo\n) {\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(thrownValue) || isNextRouterError(thrownValue)) return\n\n  if (process.env.NODE_ENV !== 'production') {\n    const error = coerceError(thrownValue)\n    setOwnerStackIfAvailable(error)\n\n    // TODO: change to passing down errorInfo later\n    // In development mode, pass along the component stack to the error\n    if (errorInfo.componentStack) {\n      setComponentStack(error, errorInfo.componentStack)\n    }\n\n    // TODO: Add an adendum to the overlay telling people about custom error boundaries.\n    reportGlobalError(error)\n  } else {\n    reportGlobalError(thrownValue)\n  }\n}\n"],"names":["setOwnerStackIfAvailable","setComponentStack","coerceError","handleClientError","isNextRouterError","isBailoutToCSRError","reportGlobalError","originConsoleError","ErrorBoundaryHandler","DefaultErrorBoundary","onCaughtError","thrownValue","errorInfo","errorBoundaryComponent","errorBoundary","constructor","isImplicitErrorBoundary","process","env","NODE_ENV","AppDevOverlayErrorBoundary","require","props","errorComponent","onUncaughtError","errorBoundaryName","displayName","name","componentThatErroredFrame","componentStack","split","matches","match","componentThatErroredName","errorBoundaryMessage","componentErrorMessage","errorLocation","error"],"mappings":"AAAA,iFAAiF;AAGjF,SACEA,wBAAwB,EACxBC,iBAAiB,EACjBC,WAAW,QACN,sCAAqC;AAC5C,SAASC,iBAAiB,QAAQ,yCAAwC;AAC1E,SAASC,iBAAiB,QAAQ,qCAAoC;AACtE,SAASC,mBAAmB,QAAQ,+CAA8C;AAClF,SAASC,iBAAiB,QAAQ,wBAAuB;AACzD,SAASC,kBAAkB,QAAQ,gDAA+C;AAClF,SAASC,oBAAoB,QAAQ,+BAA8B;AACnE,OAAOC,0BAA0B,6BAA4B;AAE7D,OAAO,SAASC,cACdC,WAAoB,EACpBC,SAA0D;QAE3BA;IAA/B,MAAMC,0BAAyBD,2BAAAA,UAAUE,aAAa,qBAAvBF,yBAAyBG,WAAW;IAEnE,IAAIC;IAEJ,IAAIC,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;QACzC,MAAM,EAAEC,0BAA0B,EAAE,GAClCC,QAAQ;QAEVL,0BACEH,2BAA2BO;IAC/B;IAEAJ,0BACEA,2BACCH,2BAA2BL,wBAC1B,AAACI,UAAUE,aAAa,CACrBQ,KAAK,CAACC,cAAc,KAAKd;IAEhC,IAAIO,yBAAyB;QAC3B,6EAA6E;QAC7E,uDAAuD;QACvD,6DAA6D;QAC7D,OAAOQ,gBAAgBb,aAAaC;IACtC;IAEA,6EAA6E;IAC7E,IAAIP,oBAAoBM,gBAAgBP,kBAAkBO,cAAc;IAExE,IAAIM,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;YAOPP;QANlC,MAAMa,oBAEJ,CADA,mCAAmC;QAClCZ,0CAAD,AAACA,uBAAgCa,WAAW,MAC5Cb,0CAAAA,uBAAwBc,IAAI,KAC5B;QAEF,MAAMC,4BAA4BhB,8BAAAA,4BAAAA,UAAWiB,cAAc,qBAAzBjB,0BAA2BkB,KAAK,CAAC,KAAK,CAAC,EAAE;YAIzE,sDAAsD;QACtD,qGAAqG;QACrG,gGAAgG;QAChGF;QALF,qCAAqC;QACrC,MAAMG,UAIJH,CAAAA,mCAAAA,6CAAAA,0BAA2BI,KAAK,CAAC,oCAAjCJ,mCAA6D,EAAE;QACjE,MAAMK,2BAA2BF,OAAO,CAAC,EAAE,IAAIA,OAAO,CAAC,EAAE,IAAI;QAE7D,iIAAiI;QACjI,MAAMG,uBAAuB,AAAC,4BAAyBT,oBAAkB;QACzE,MAAMU,wBAAwBF,2BAC1B,AAAC,sCAAmCA,2BAAyB,iBAC5D;QAEL,MAAMG,gBAAgB,AAAGD,wBAAsB,MAAGD;QAElD,MAAMG,QAAQnC,YAAYS;QAC1BX,yBAAyBqC;QACzB,+CAA+C;QAC/C,mEAAmE;QACnE,IAAIzB,UAAUiB,cAAc,EAAE;YAC5B5B,kBAAkBoC,OAAOzB,UAAUiB,cAAc;QACnD;QAEA,+EAA+E;QAC/EtB,mBAAmB,YAAYI,aAAayB;QAE5CjC,kBAAkBkC;IACpB,OAAO;QACL9B,mBAAmBI;IACrB;AACF;AAEA,OAAO,SAASa,gBACdb,WAAoB,EACpBC,SAA0B;IAE1B,6EAA6E;IAC7E,IAAIP,oBAAoBM,gBAAgBP,kBAAkBO,cAAc;IAExE,IAAIM,QAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;QACzC,MAAMkB,QAAQnC,YAAYS;QAC1BX,yBAAyBqC;QAEzB,+CAA+C;QAC/C,mEAAmE;QACnE,IAAIzB,UAAUiB,cAAc,EAAE;YAC5B5B,kBAAkBoC,OAAOzB,UAAUiB,cAAc;QACnD;QAEA,oFAAoF;QACpFvB,kBAAkB+B;IACpB,OAAO;QACL/B,kBAAkBK;IACpB;AACF","ignoreList":[0]}