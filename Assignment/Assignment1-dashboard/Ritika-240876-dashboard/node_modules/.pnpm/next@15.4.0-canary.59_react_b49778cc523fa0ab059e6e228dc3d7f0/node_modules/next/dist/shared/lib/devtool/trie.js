/**
 * Trie data structure for storing and searching paths
 *
 * This can be used to store app router paths and search for them efficiently.
 * e.g.
 *
 * [trie root]
 *   ├── layout.js
 *   ├── page.js
 *   ├── blog
 *       ├── layout.js
 *       ├── page.js
 *       ├── [slug]
 *          ├── layout.js
 *          ├── page.js
 **/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createTrie", {
    enumerable: true,
    get: function() {
        return createTrie;
    }
});
function createTrie(param) {
    let { getKey = (k)=>k } = param;
    const root = {
        value: undefined,
        children: {}
    };
    function insert(value) {
        let currentNode = root;
        const key = getKey(value);
        const segments = key.split('/');
        for (const segment of segments){
            if (!currentNode.children[segment]) {
                currentNode.children[segment] = {
                    // Skip value for intermediate nodes
                    children: {}
                };
            }
            currentNode = currentNode.children[segment];
        }
        currentNode.value = value;
    }
    function getRoot() {
        return root;
    }
    return {
        insert,
        getRoot
    };
}

//# sourceMappingURL=trie.js.map