'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    SegmentViewNode: null,
    useSegmentTreeClientState: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SegmentViewNode: function() {
        return SegmentViewNode;
    },
    useSegmentTreeClientState: function() {
        return useSegmentTreeClientState;
    }
});
const _react = require("react");
const _trie = require("./trie");
const DEFAULT_CLIENT_STATE = typeof window === 'undefined' ? undefined : (0, _trie.createTrie)({
    getKey: (item)=>item.pagePath
});
function getSegmentTreeClientState() {
    if (typeof window === 'undefined') {
        return {};
    }
    if (!window.__NEXT_DEVTOOLS_CLIENT_STATE) {
        window.__NEXT_DEVTOOLS_CLIENT_STATE = {
            // Initial state
            tree: DEFAULT_CLIENT_STATE
        };
    }
    return window.__NEXT_DEVTOOLS_CLIENT_STATE;
}
const listeners = typeof window === 'undefined' ? null : new Set();
const createSegmentTreeStore = ()=>{
    if (typeof window === 'undefined') {
        return {
            subscribe: ()=>()=>void 0,
            getSnapshot: ()=>({}),
            getServerSnapshot: ()=>undefined
        };
    }
    // return a store that can be used by useSyncExternalStore
    return {
        subscribe: (callback)=>{
            listeners == null ? void 0 : listeners.add(callback);
            return ()=>listeners == null ? void 0 : listeners.delete(callback);
        },
        getSnapshot: ()=>{
            return getSegmentTreeClientState();
        },
        getServerSnapshot: ()=>{
            return undefined;
        }
    };
};
const { subscribe, getSnapshot, getServerSnapshot } = createSegmentTreeStore();
function SegmentViewNode(param) {
    let { type, pagePath, children } = param;
    const clientState = getSegmentTreeClientState();
    const tree = clientState.tree;
    (0, _react.useEffect)(()=>{
        if (!tree) {
            return;
        }
        tree.insert({
            type,
            pagePath
        });
    }, [
        type,
        pagePath,
        tree
    ]);
    return children;
}
function useSegmentTreeClientState() {
    const state = (0, _react.useSyncExternalStore)(subscribe, getSnapshot, getServerSnapshot);
    return state;
}

//# sourceMappingURL=app-segment-tree.js.map