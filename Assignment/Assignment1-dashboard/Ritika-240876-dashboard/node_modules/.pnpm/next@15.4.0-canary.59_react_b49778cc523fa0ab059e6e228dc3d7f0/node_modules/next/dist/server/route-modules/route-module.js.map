{"version":3,"sources":["../../../src/server/route-modules/route-module.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'node:http'\nimport type { InstrumentationOnRequestError } from '../instrumentation/types'\nimport type { ParsedUrlQuery } from 'node:querystring'\nimport type { UrlWithParsedQuery } from 'node:url'\nimport type {\n  PrerenderManifest,\n  RequiredServerFilesManifest,\n} from '../../build'\nimport type { DevRoutesManifest } from '../lib/router-utils/setup-dev-bundler'\nimport type { RouteDefinition } from '../route-definitions/route-definition'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\n\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_FILES_MANIFEST,\n} from '../../shared/lib/constants'\nimport { parseReqUrl } from '../../lib/url'\nimport {\n  normalizeLocalePath,\n  type PathLocale,\n} from '../../shared/lib/i18n/normalize-locale-path'\nimport { isDynamicRoute } from '../../shared/lib/router/utils'\nimport { removePathPrefix } from '../../shared/lib/router/utils/remove-path-prefix'\nimport { getServerUtils } from '../server-utils'\nimport { detectDomainLocale } from '../../shared/lib/i18n/detect-domain-locale'\nimport { getHostname } from '../../shared/lib/get-hostname'\nimport { checkIsOnDemandRevalidate } from '../api-utils'\nimport type { PreviewData } from '../../types'\nimport type { BuildManifest } from '../get-page-files'\nimport type { ReactLoadableManifest } from '../load-components'\nimport type { NextFontManifest } from '../../build/webpack/plugins/next-font-manifest-plugin'\nimport { normalizeDataPath } from '../../shared/lib/page-path/normalize-data-path'\nimport { pathHasPrefix } from '../../shared/lib/router/utils/path-has-prefix'\nimport { addRequestMeta, getRequestMeta } from '../request-meta'\nimport { normalizePagePath } from '../../shared/lib/page-path/normalize-page-path'\n\n/**\n * RouteModuleOptions is the options that are passed to the route module, other\n * route modules should extend this class to add specific options for their\n * route.\n */\nexport interface RouteModuleOptions<\n  D extends RouteDefinition = RouteDefinition,\n  U = unknown,\n> {\n  readonly definition: Readonly<D>\n  readonly userland: Readonly<U>\n  readonly distDir: string\n  readonly projectDir: string\n}\n\n/**\n * RouteHandlerContext is the base context for a route handler.\n */\nexport interface RouteModuleHandleContext {\n  /**\n   * Any matched parameters for the request. This is only defined for dynamic\n   * routes.\n   */\n  params: Record<string, string | string[] | undefined> | undefined\n}\n\n/**\n * RouteModule is the base class for all route modules. This class should be\n * extended by all route modules.\n */\nexport abstract class RouteModule<\n  D extends RouteDefinition = RouteDefinition,\n  U = unknown,\n> {\n  /**\n   * The userland module. This is the module that is exported from the user's\n   * code. This is marked as readonly to ensure that the module is not mutated\n   * because the module (when compiled) only provides getters.\n   */\n  public readonly userland: Readonly<U>\n\n  /**\n   * The definition of the route.\n   */\n  public readonly definition: Readonly<D>\n\n  /**\n   * The shared modules that are exposed and required for the route module.\n   */\n  public static readonly sharedModules: any\n\n  public isDev: boolean\n  public distDir: string\n  public projectDir: string\n\n  constructor({\n    userland,\n    definition,\n    distDir,\n    projectDir,\n  }: RouteModuleOptions<D, U>) {\n    this.userland = userland\n    this.definition = definition\n    this.isDev = process.env.NODE_ENV === 'development'\n    this.distDir = distDir\n    this.projectDir = projectDir\n  }\n\n  public async instrumentationOnRequestError(\n    req: IncomingMessage,\n    ...args: Parameters<InstrumentationOnRequestError>\n  ) {\n    // this is only handled here for node, for edge it\n    // is handled in the adapter/loader instead\n    if (process.env.NEXT_RUNTIME !== 'edge') {\n      const { join } = require('node:path')\n      const projectDir =\n        getRequestMeta(req, 'projectDir') ||\n        join(process.cwd(), this.projectDir)\n\n      const { instrumentationOnRequestError } = await import(\n        '../lib/router-utils/instrumentation-globals.external'\n      )\n\n      return instrumentationOnRequestError(projectDir, this.distDir, ...args)\n    }\n  }\n\n  private async loadManifests(projectDir: string, srcPage: string) {\n    if (process.env.NEXT_RUNTIME !== 'edge') {\n      const { loadManifestFromRelativePath } = await import(\n        '../load-manifest.external'\n      )\n      const normalizedPagePath = normalizePagePath(srcPage)\n\n      const [\n        routesManifest,\n        prerenderManifest,\n        buildManifest,\n        reactLoadableManifest,\n        nextFontManifest,\n        serverFilesManifest,\n        buildId,\n      ] = await Promise.all([\n        loadManifestFromRelativePath<DevRoutesManifest>({\n          projectDir,\n          distDir: this.distDir,\n          manifest: ROUTES_MANIFEST,\n        }),\n        loadManifestFromRelativePath<PrerenderManifest>({\n          projectDir,\n          distDir: this.distDir,\n          manifest: PRERENDER_MANIFEST,\n        }),\n        loadManifestFromRelativePath<BuildManifest>({\n          projectDir,\n          distDir: this.distDir,\n          manifest: BUILD_MANIFEST,\n        }),\n        loadManifestFromRelativePath<ReactLoadableManifest>({\n          projectDir,\n          distDir: this.distDir,\n          manifest: process.env.TURBOPACK\n            ? `server/pages${normalizedPagePath}/${REACT_LOADABLE_MANIFEST}`\n            : REACT_LOADABLE_MANIFEST,\n          handleMissing: true,\n        }),\n        loadManifestFromRelativePath<NextFontManifest>({\n          projectDir,\n          distDir: this.distDir,\n          manifest: `server/${NEXT_FONT_MANIFEST}.json`,\n        }),\n        this.isDev\n          ? ({} as any)\n          : loadManifestFromRelativePath<RequiredServerFilesManifest>({\n              projectDir,\n              distDir: this.distDir,\n              manifest: SERVER_FILES_MANIFEST,\n            }),\n        this.isDev\n          ? 'development'\n          : loadManifestFromRelativePath<any>({\n              projectDir,\n              distDir: this.distDir,\n              manifest: BUILD_ID_FILE,\n              skipParse: true,\n            }),\n      ])\n\n      return {\n        buildId,\n        buildManifest,\n        routesManifest,\n        nextFontManifest,\n        prerenderManifest,\n        serverFilesManifest,\n        reactLoadableManifest,\n      }\n    }\n    throw new Error('Invariant: loadManifests called for edge runtime')\n  }\n\n  public async prepare(\n    req: IncomingMessage,\n    res: ServerResponse,\n    {\n      srcPage,\n      multiZoneDraftMode,\n    }: {\n      srcPage: string\n      multiZoneDraftMode?: boolean\n    }\n  ): Promise<\n    | {\n        buildId: string\n        locale?: string\n        locales?: readonly string[]\n        defaultLocale?: string\n        query: ParsedUrlQuery\n        originalQuery: ParsedUrlQuery\n        originalPathname: string\n        params?: ParsedUrlQuery\n        parsedUrl: UrlWithParsedQuery\n        previewData: PreviewData\n        isDraftMode: boolean\n        isNextDataRequest: boolean\n        buildManifest: DeepReadonly<BuildManifest>\n        nextFontManifest: DeepReadonly<NextFontManifest>\n        serverFilesManifest: DeepReadonly<RequiredServerFilesManifest>\n        reactLoadableManifest: DeepReadonly<ReactLoadableManifest>\n        routesManifest: DeepReadonly<DevRoutesManifest>\n        prerenderManifest: DeepReadonly<PrerenderManifest>\n        isOnDemandRevalidate: boolean\n        revalidateOnlyGenerated: boolean\n      }\n    | undefined\n  > {\n    // \"prepare\" is only needed for node runtime currently\n    // if we want to share the normalizing logic here\n    // we will need to allow passing in the i18n and similar info\n    if (process.env.NEXT_RUNTIME !== 'edge') {\n      const { join } = require('node:path')\n      const projectDir =\n        getRequestMeta(req, 'projectDir') ||\n        join(process.cwd(), this.projectDir)\n\n      const { ensureInstrumentationRegistered } = await import(\n        '../lib/router-utils/instrumentation-globals.external'\n      )\n      // ensure instrumentation is registered and pass\n      // onRequestError below\n      ensureInstrumentationRegistered(projectDir, this.distDir)\n\n      const manifests = await this.loadManifests(projectDir, srcPage)\n      const { routesManifest, prerenderManifest } = manifests\n      const { basePath, i18n, rewrites } = routesManifest\n\n      if (basePath) {\n        req.url = removePathPrefix(req.url || '/', basePath)\n      }\n\n      const parsedUrl = parseReqUrl(req.url || '/')\n      // if we couldn't parse the URL we can't continue\n      if (!parsedUrl) {\n        return\n      }\n      let isNextDataRequest = false\n\n      if (pathHasPrefix(parsedUrl.pathname || '/', '/_next/data')) {\n        isNextDataRequest = true\n        parsedUrl.pathname = normalizeDataPath(parsedUrl.pathname || '/')\n      }\n      let originalPathname = parsedUrl.pathname || '/'\n      const originalQuery = { ...parsedUrl.query }\n      const pageIsDynamic = isDynamicRoute(srcPage)\n\n      let localeResult: PathLocale | undefined\n      let detectedLocale: string | undefined\n\n      if (i18n) {\n        localeResult = normalizeLocalePath(\n          parsedUrl.pathname || '/',\n          i18n.locales\n        )\n\n        if (localeResult.detectedLocale) {\n          req.url = `${localeResult.pathname}${parsedUrl.search}`\n          originalPathname = localeResult.pathname\n\n          if (!detectedLocale) {\n            detectedLocale = localeResult.detectedLocale\n          }\n        }\n      }\n\n      const serverUtils = getServerUtils({\n        page: srcPage,\n        i18n,\n        basePath,\n        rewrites,\n        pageIsDynamic,\n        trailingSlash: process.env.__NEXT_TRAILING_SLASH as any as boolean,\n        caseSensitive: Boolean(routesManifest.caseSensitive),\n      })\n\n      const domainLocale = detectDomainLocale(\n        i18n?.domains,\n        getHostname(parsedUrl, req.headers),\n        detectedLocale\n      )\n      addRequestMeta(req, 'isLocaleDomain', Boolean(domainLocale))\n\n      const defaultLocale = domainLocale?.defaultLocale || i18n?.defaultLocale\n\n      // Ensure parsedUrl.pathname includes locale before processing\n      // rewrites or they won't match correctly.\n      if (defaultLocale && !detectedLocale) {\n        parsedUrl.pathname = `/${defaultLocale}${parsedUrl.pathname}`\n      }\n      const locale =\n        getRequestMeta(req, 'locale') || detectedLocale || defaultLocale\n\n      const rewriteParamKeys = Object.keys(\n        serverUtils.handleRewrites(req, parsedUrl)\n      )\n\n      // after processing rewrites we want to remove locale\n      // from parsedUrl pathname\n      if (i18n) {\n        parsedUrl.pathname = normalizeLocalePath(\n          parsedUrl.pathname || '/',\n          i18n.locales\n        ).pathname\n      }\n\n      let params: Record<string, undefined | string | string[]> | undefined =\n        getRequestMeta(req, 'params')\n\n      // attempt parsing from pathname\n      if (!params && serverUtils.dynamicRouteMatcher) {\n        const paramsResult = serverUtils.dynamicRouteMatcher(\n          normalizeDataPath(localeResult?.pathname || parsedUrl.pathname || '/')\n        )\n        if (paramsResult) {\n          params = paramsResult\n        }\n      }\n\n      // Local \"next start\" expects the routing parsed query values\n      // to not be present in the URL although when deployed proxies\n      // will add query values from resolving the routes to pass to function.\n\n      // TODO: do we want to change expectations for \"next start\"\n      // to include these query values in the URL which affects asPath\n      // but would match deployed behavior, e.g. a rewrite from middleware\n      // that adds a query param would be in asPath as query but locally\n      // it won't be in the asPath but still available in the query object\n      const query = getRequestMeta(req, 'query') || {\n        ...parsedUrl.query,\n      }\n\n      const routeParamKeys = new Set<string>()\n      const combinedParamKeys = [...rewriteParamKeys, ...routeParamKeys]\n\n      serverUtils.normalizeCdnUrl(req, combinedParamKeys)\n      serverUtils.normalizeQueryParams(query, routeParamKeys)\n      serverUtils.filterInternalQuery(originalQuery, combinedParamKeys)\n\n      if (pageIsDynamic) {\n        const result = serverUtils.normalizeDynamicRouteParams(query, true)\n\n        req.url = serverUtils.interpolateDynamicPath(\n          req.url || '/',\n          params || query\n        )\n        parsedUrl.pathname = serverUtils.interpolateDynamicPath(\n          parsedUrl.pathname || '/',\n          params || query\n        )\n        originalPathname = serverUtils.interpolateDynamicPath(\n          originalPathname,\n          params || query\n        )\n\n        // try pulling from query if valid\n        if (result.hasValidParams) {\n          params = Object.assign({}, result.params, params)\n\n          // If we pulled from query remove it so it's\n          // only in params\n          for (const key in params) {\n            delete query[key]\n          }\n        }\n      }\n\n      // Remove any normalized params from the query if they\n      // weren't present as non-prefixed query key e.g.\n      // ?search=1&nxtPsearch=hello we don't delete search\n      for (const key of routeParamKeys) {\n        if (!(key in originalQuery)) {\n          delete query[key]\n        }\n      }\n\n      const { isOnDemandRevalidate, revalidateOnlyGenerated } =\n        checkIsOnDemandRevalidate(req, prerenderManifest.preview)\n\n      let isDraftMode = false\n      let previewData: PreviewData\n\n      const { tryGetPreviewData } =\n        require('../api-utils/node/try-get-preview-data') as typeof import('../api-utils/node/try-get-preview-data')\n\n      previewData = tryGetPreviewData(\n        req,\n        res,\n        prerenderManifest.preview,\n        Boolean(multiZoneDraftMode)\n      )\n      isDraftMode = previewData !== false\n\n      return {\n        query,\n        originalQuery,\n        originalPathname,\n        params,\n        parsedUrl,\n        locale,\n        isNextDataRequest,\n        locales: i18n?.locales,\n        defaultLocale,\n        isDraftMode,\n        previewData,\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated,\n        ...manifests,\n      }\n    }\n  }\n}\n"],"names":["RouteModule","constructor","userland","definition","distDir","projectDir","isDev","process","env","NODE_ENV","instrumentationOnRequestError","req","args","NEXT_RUNTIME","join","require","getRequestMeta","cwd","loadManifests","srcPage","loadManifestFromRelativePath","normalizedPagePath","normalizePagePath","routesManifest","prerenderManifest","buildManifest","reactLoadableManifest","nextFontManifest","serverFilesManifest","buildId","Promise","all","manifest","ROUTES_MANIFEST","PRERENDER_MANIFEST","BUILD_MANIFEST","TURBOPACK","REACT_LOADABLE_MANIFEST","handleMissing","NEXT_FONT_MANIFEST","SERVER_FILES_MANIFEST","BUILD_ID_FILE","skipParse","Error","prepare","res","multiZoneDraftMode","ensureInstrumentationRegistered","manifests","basePath","i18n","rewrites","url","removePathPrefix","parsedUrl","parseReqUrl","isNextDataRequest","pathHasPrefix","pathname","normalizeDataPath","originalPathname","originalQuery","query","pageIsDynamic","isDynamicRoute","localeResult","detectedLocale","normalizeLocalePath","locales","search","serverUtils","getServerUtils","page","trailingSlash","__NEXT_TRAILING_SLASH","caseSensitive","Boolean","domainLocale","detectDomainLocale","domains","getHostname","headers","addRequestMeta","defaultLocale","locale","rewriteParamKeys","Object","keys","handleRewrites","params","dynamicRouteMatcher","paramsResult","routeParamKeys","Set","combinedParamKeys","normalizeCdnUrl","normalizeQueryParams","filterInternalQuery","result","normalizeDynamicRouteParams","interpolateDynamicPath","hasValidParams","assign","key","isOnDemandRevalidate","revalidateOnlyGenerated","checkIsOnDemandRevalidate","preview","isDraftMode","previewData","tryGetPreviewData"],"mappings":"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","ignoreList":[0]}